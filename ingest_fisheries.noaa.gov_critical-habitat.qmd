---
title: "Ingest NMFS ESA Critical Habitat Geodatabase"
editor_options: 
  chunk_output_type: console
---

## Read NMFS ESA Critical Habitat Geodatabase

- [National ESA Critical Habitat Mapper | NOAA Fisheries](https://www.fisheries.noaa.gov/resource/map/national-esa-critical-habitat-mapper)
  - Downloaded Geodatabase
  - metadata: [National ESA Critical Habitat Geodatabase | InPort](https://www.fisheries.noaa.gov/inport/item/65207)
  - [Threatened and Endangered Species List—Gulf of America | NOAA Fisheries](https://www.fisheries.noaa.gov/southeast/consultations/threatened-and-endangered-species-list-gulf-america)

```{r setup}
librarian::shelf(
  DBI, dplyr, DT, duckdb, fs, glue, here, knitr, janitor, leaflet, 
  leaflet.extras2, mapview, purrr, sf, stringr, terra, tibble,
  quiet = T)

mapviewOptions(
  basemaps       = "Esri.OceanBasemap",
  vector.palette = \(n) grDevices::hcl.colors(n, palette = "Spectral") )
sf_use_s2(T)

is_server    <- Sys.info()[["sysname"]] == "Linux"
dir_private  <- ifelse(is_server, "/share/private", "~/My Drive/private")
iucn_tkn_txt <- glue("{dir_private}/iucnredlist.org_api_token_v4.txt")
dir_data     <- ifelse(is_server, "/share/data"   , "~/My Drive/projects/msens/data")
dir_gbif     <- glue("{dir_data}/raw/gbif.org")
spp_db       <- glue("{dir_data}/derived/spp.duckdb")
sdm_db       <- glue("{dir_data}/derived/sdm.duckdb")
dir_gdb      <- "~/My Drive/projects/msens/data/raw/fisheries.noaa.gov"
gdb          <- glue("{dir_gdb}/NMFS_ESA_Critical_Habitat_20230505_2025-05-12.gdb")
# gdb          <- glue("{dir_gdb}/NMFS_ESA_Critical_Habitat_20230505_2025-07-17.gdb") # TODO: newer, but issues reading plys
lns_geo      <- glue("{dir_gdb}/lns.gpkg")
ply_geo      <- glue("{dir_gdb}/ply.gpkg")
cell_tif     <- glue("{dir_data}/derived/r_bio-oracle_planarea.tif")
dir_figs     <- here("figs/ingest_fisheries.noaa.gov_critical-habitat")
ply_png      <- glue("{dir_figs}/ply.png")
lns_png      <- glue("{dir_figs}/lns.png")

dir.create(dir_figs, showWarnings = F, recursive = T)
```

### Layers

```{r layers}
d_lyrs <- st_layers(gdb) |> 
  tibble() |> 
  mutate(
    crs      = map_chr(crs, ~ st_crs(.x)$input),
    geomtype = unlist(geomtype)) |> 
  select(-driver) |> 
  arrange(name)

d_lyrs |> 
  datatable()
```

### Lines

```{r lines_map}
if (!file.exists(lns_geo)){
  
  lns <- st_read(gdb, layer = "All_critical_habitat_line_20220404", quiet = T) |> 
    tibble() |> 
    st_as_sf()
  
  # lns$LISTSTATUS |> table()
  # Endangered Threatened 
  #      11467      48421
  # lns |> st_drop_geometry() |> select(LISTSTATUS, CHSTATUS) |> table()
  #             CHSTATUS
  # LISTSTATUS   Final
  #   Endangered 11467
  #   Threatened 48421
  
  lns_s <- lns |> 
    mutate(
      cm_er = case_match(
        LISTSTATUS,
        "Threatened" ~ glue("{COMNAME} (TN)"),  # TODO: assign relative to IUCN
        "Endangered" ~ glue("{COMNAME} (EN)") ) ) |> 
    group_by(TAXON, cm_er, SCIENAME, COMNAME, LISTSTATUS, HABTYPE) |> 
    summarize(
      n = n(), .groups = "drop")
  
  st_write(lns_s, lns_geo, delete_dsn = T, quiet = T)
}
lns_s <- st_read(lns_geo, quiet = T)

if (!file.exists(lns_png)){
  m <- mapView(lns_s, alpha.regions = 0.5, zcol = "cm_er")
  mapshot2(m, file = lns_png)
}
```

![Lines of Critical Habitat as a static map 
`r glue("(Data source {basename(lns_geo)} too big ({file_size(lns_geo)}) for interactive display on Github-hosted notebook)")`.](`r lns_png |> str_replace(here(), ".")`){#fig-lns .lightbox}

```{r lines_table}
lns_s |> 
  st_drop_geometry() |> 
  datatable()
```

### Polygons

```{r polygons_map}
if (!file.exists(ply_geo)){
  sf_use_s2(F)
  
  ply <- st_read(gdb, layer = "All_critical_habitat_poly_20230724", quiet = T) |> 
    tibble() |> 
    st_as_sf() |> 
    st_make_valid()
  
  # ply$LISTSTATUS |> table()
  # Endangered Threatened 
  #       1043       1071 
  # ply |> st_drop_geometry() |> select(LISTSTATUS, CHSTATUS) |> table()
  #             CHSTATUS
  # LISTSTATUS   Designated Final Proposed
  #   Endangered          0  1024       19
  #   Threatened         20   997       54
  
  ply_s <- ply |> 
    mutate(
      er = case_match( # er: extinction risk
        LISTSTATUS,
        "Threatened" ~ "TN",
        "Endangered" ~ "EN"),
      st = case_match(
        CHSTATUS,
        "Designated" ~ "des.",
        "Final"      ~ "fin.",
        "Proposed"   ~ "prop." ),
      cm_er_st = glue("{COMNAME} ({er}) {st}") ) |> 
    group_by(TAXON, cm_er_st, SCIENAME, COMNAME, LISTSTATUS, HABTYPE) |> 
    summarize(
      n = n(), .groups = "drop")

  st_write(ply_s, ply_geo, delete_dsn = T, quiet = T)
  
  sf_use_s2(T)
}
ply_s <- st_read(ply_geo, quiet = T)

if (!file.exists(ply_png)){
  m <- mapView(ply_s, alpha.regions = 0.5, zcol = "cm_er_st")
  mapshot2(m, file = ply_png)
}
```

![Polygons of Critical Habitat as a static map 
`r glue("(Data source {basename(ply_geo)} too big ({fs::file_size(ply_geo)}) for interactive display on Github-hosted notebook)")`.](`r ply_png |> str_replace(here(), ".")`){#fig-ply .lightbox}

```{r polygons_table}
ply_s |> 
  st_drop_geometry() |> 
  datatable()
```

## Convert to MSToolkit Framework

### Extinction Risk: ESA vs IUCN?

Note: ESA lists only "Endangered" or "Threatened" species, but "Threatened" is
not in the IUCN RedList, so need to apply a code and score relative to others:

**Extinction Risk**:

- `CR`: 1\
  Critically Endangered (IUCN)
- `EN`: 0.8\
  Endangered (IUCN, **ESA**)
- `VU`: 0.6\
  Vulnerable (IUCN)
- `TN`: **0.6** \
  **Threatened**  (**ESA**)
- `NT`: 0.4\
  Near Threatened (IUCN)
- `LC`: 0.2\
  Least Concern (IUCN)

TODO: Check for equivalency and other issues with this comparison:

- [Harris et al (2012) Conserving Imperiled Species: A Comparison of the IUCN Red List and U.S. Endangered Species Act.” Cons Lttrs](https://doi.org/10.1111/j.1755-263X.2011.00205.x)

- [Threatened vs. Vulnerable - What's the Difference? | This vs. That](https://thisvsthat.io/threatened-vs-vulnerable)

### Polygon to raster, eg _Balaenoptera ricei_

The `terra::rasterize()` function with the 0.05° raster template provides a reasonable approximation of the original shapefile.

```{r fig-ply_ricei}
#| fig-cap: "Rasterized polygon of Rice's whale critical habitat as interactive map."

r_cell <- rast(cell_tif)

ply_ricei <- ply_s |>
  filter(SCIENAME == "Balaenoptera ricei")

r_ricei <- rasterize(
  ply_ricei |> 
    st_shift_longitude() |> # [-180, 180] -> [0, 360]
    mutate(value = 100),    # TODO: default value
  r_cell, 
  field = "value") |> 
  trim()

leaflet() |>
  addMapPane("left_pn",  zIndex = 0) |>
  addMapPane("right_pn", zIndex = 0) |>
  addProviderTiles(
    "Esri.OceanBasemap", group = "left_grp",  layerId = "left_lyr",
    options = pathOptions(pane = "left_pn")) |>
  addProviderTiles(
    "Esri.OceanBasemap", group = "right_grp", layerId = "right_lyr",
    options = pathOptions(pane = "right_pn")) |>
  addPolygons(
    data         = ply_ricei,
    fillColor    = "blue",
    fillOpacity  = 0.5,
    weight       = 1,
    color        = "blue",
    group        = "ply",
    options      = pathOptions(pane = "left_pn") ) |>
  addRasterImage(
    r_ricei,
    colors  = "red",
    opacity = 0.8,
    group   = "rast",
    options = leafletOptions(pane = "right_pn") ) |>
  leaflet.extras2::addSidebyside(
    layerId     = "sidecontrols",
    rightId     = "right_lyr",
    leftId      = "left_lyr")
```

### Default Suitability?

Originally I thought of applying a default suitability value of 50% to these
binary range maps, but examples like Rice's whale illustrate the importance of upweighting these critical habitats, so instead how about weighting by 
extinction risk:

**Suitability**:

- `EN`: 100%\
  Endangered (IUCN, **ESA**)
- `TN`: 80%\
  **Threatened**  (**ESA**)

The suitability value gets multiplied by the extinction risk for the species'
contribution to overall sensitivity.

- O'Hara et al (2017) [Aligning marine species range data to better serve science and conservation](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0175739) _PLOS One_

And related:

- Lee-Yaw et al (2021) [Species distribution models rarely predict the biology of real populations](https://nsojournals.onlinelibrary.wiley.com/doi/full/10.1111/ecog.05877) _Ecography_
- Borgelt  et al (2022) [More than half of data deficient species predicted to be threatened by extinction | Communications Biology](https://www.nature.com/articles/s42003-022-03638-9)
- Moudrý & Devillers (2020) [Quality and usability challenges of global marine biodiversity databases: An example for marine mammal data](https://www.sciencedirect.com/science/article/pii/S1574954120300017?casa_token=WF_-wuk3arkAAAAA:AitcjoacX-qkxeX3ZS7WdO3rGigHo5DW4lYvGu6eELdCrY9xsd2O2b2N8hJBwY8kX1aLINU77iA) _Ecological Informatics_
- O'Hara et al (2019) [Mapping status and conservation of global at-risk marine biodiversity](https://conbio.onlinelibrary.wiley.com/doi/full/10.1111/conl.12651) _Conservation Letters_
- Palacio et al (2021) [A data‐driven geospatial workflow to map species distributions for conservation assessments](https://onlinelibrary.wiley.com/doi/full/10.1111/ddi.13424) _Diversity and Distributions_
- Merow et al (2022) [Operationalizing expert knowledge in species' range estimates using diverse data types](https://escholarship.org/uc/item/3m7719vv) _Frontiers of Biogeography_
- Ready et al (2010) [Predicting the distributions of marine organisms at the global scale](https://www.sciencedirect.com/science/article/pii/S030438000900711X?casa_token=Nrl34cYvTN4AAAAA:4_nIKkt6BcGmLZAKE-EqGO4CXPpJLaJmePucdYPQaJK3rsA8svBRDaeLYeD-1-hUbYOq3Qc1rgM) _Ecological Modelling_
- Zhang et al (2025) [Differences in predictions of marine species distribution models based on expert maps and opportunistic occurrences](https://conbio.onlinelibrary.wiley.com/doi/full/10.1111/cobi.70015?casa_token=b6R7j3bt_VkAAAAA%3AUBNiiPvPiCyzF4rz8NFvu8V-AmF2VjFN7sfapmiGMI1XtU2OOItOgasjVj4a42r38fn4s7IiQ1vftnoV) _Conservation Biology_
- Ferrari et al (2018) [Integrating distribution models and habitat classification maps into marine protected area planning - ScienceDirect](https://www.sciencedirect.com/science/article/pii/S0272771417310454?casa_token=TdDGGhEhrsMAAAAA:BGk07IU_j8wqaU4dg-A-JNnIAC-DCX2QL3RlhT_zwFHDkE9bHIOMSZT3MUy1XHybNR80hTdPnLQ) _Estuarine, Coastal and Shelf Science_

### Line to raster, eg ...

```{r lns_to_rast}

```

```{r evaloff}
knitr::opts_chunk$set(eval = F)
```

```{r init_dbs}
con_spp <- dbConnect(duckdb(dbdir = spp_db, read_only = T))
con_sdm <- dbConnect(duckdb(dbdir = sdm_db, read_only = F))
# dbListTables(con_sdm)
# tbl(con_sdm, "species") |> 
#   filter(common_name_dataset == "blue whale") |> 
#   collect() |> 
#   View()
```

### Add `dataset`

```{r insert_dataset_row}
ds_key      <- "ch_nmfs"
row_dataset <- tibble(
  ds_key          = !!ds_key,
  name_short      = "NMFS Critical Habitat for USA, 2025-05-12",
  name_original   = "National ESA Critical Habitat Geodatabase",
  description     = "The National Marine Fisheries Service (NMFS) developed this geodatabase to standardize its Endangered Species Act (ESA) critical habitat spatial data.",
  citation        = "",
  source_broad    = "NMFS",
  source_detail   = "https://www.fisheries.noaa.gov",
  regions         = "USA",
  response_type   = "binary",
  taxa_groups     = "all taxa",
  year_pub        = 2025,
  date_obs_beg    = NA,
  date_obs_end    = NA,
  date_env_beg    = NA,
  date_env_end    = NA,
  link_info       = "https://www.fisheries.noaa.gov/resource/map/national-esa-critical-habitat-mapper",
  link_download   = "https://noaa.maps.arcgis.com/home/item.html?id=f66c1e33f91d480db7d1b1c1336223c3",
  link_metadata   = "https://www.fisheries.noaa.gov/inport/item/65207",
  links_other     = "https://noaa.maps.arcgis.com/apps/webappviewer/index.html?id=68d8df16b39c48fe9f60640692d0e318",
  spatial_res_deg = 0.05,
  temporal_res    = "static" )

if (dbExistsTable(con_sdm, "dataset"))
  dbExecute(con_sdm, glue("DELETE FROM dataset WHERE ds_key = '{ds_key}'"))

dbWriteTable(con_sdm, "dataset", row_dataset, append = TRUE)
# tbl(con_sdm, "dataset")
```

### Iterate rows: `species`, `model`, `model_cell`

TODO: 

- [ ] sort different liststatus per species, e.g. Rice's whale has both "prop." and "fin." status

```{r setup_iterate}
ds_key      <- "ch_nmfs"

ply <- read_sf(gdb, layer = "All_critical_habitat_poly_20230724", quiet = T) |> 
  clean_names() |> 
  st_make_valid() |> 
  mutate(
    taxon    = tolower(taxon),
    esa_code = case_match( # er: extinction risk
      liststatus,
      "Threatened" ~ "TN",     # "TN" = 0.6
      "Endangered" ~ "EN") |>  # "EN" = 0.8
      factor(c("TN", "EN"), ordered = T)) |> 
  # pull(taxon) |> table(useNA = "ifany")
  # baleen whale           fish   invertebrate marine reptile       pinniped  toothed whale 
  #            5             18             13              7              8              3 
  mutate(
    sp_cat = case_when(
      taxon %in% c(
        "baleen whale", "toothed whale", "pinniped") ~ "mammal",
      str_detect(comname, "Coral")                   ~ "coral",
      taxon == "marine reptile"                      ~ "turtle",
      .default = taxon))

# ply |> pull(sp_cat) |> table(useNA = "ifany")
# coral         fish invertebrate       mammal       turtle 
#    64         1768           16          169           97 
#
# ply$liststatus |> table()
# Endangered Threatened 
#       1043       1071 
# 
# ply$esa_code |> table(useNA = "ifany")
#   TN   EN 
# 1071 1043
# 
# ply |> st_drop_geometry() |> select(liststatus, chstatus) |> table()
#             chstatus
# liststatus   Designated Final Proposed
#   Endangered          0  1024       19
#   Threatened         20   997       54

d_spp <- ply |> 
  st_drop_geometry() |> 
  group_by(sp_cat, sciename, comname) |>
  summarize(
    esa_code_max = max(esa_code),  # Get max esa_code to use for species weight. Precautionary principle
    n_esa_tn     = sum(esa_code == "TN"),
    n_esa_en     = sum(esa_code == "EN"),
    .groups = "drop") |> 
  rowid_to_column()

d_spp |>
  filter(n_esa_tn > 0 & n_esa_en > 0)
#   rowid sp_cat sciename                 comname           esa_code_max n_esa_tn n_esa_en
#   <int> <chr>  <chr>                    <chr>             <ord>           <int>    <int>
# 1    18 fish   Oncorhynchus tshawytscha Salmon, Chinook   EN                135        1
# 2    30 mammal Megaptera novaeangliae   Whale, humpback   EN                 12       11
# 3    36 turtle Chelonia mydas           Sea turtle, green EN                 31       18

r_cell   <- rast(cell_tif, lyrs = "cell_id") # [   0, 360]
ext(r_cell) <- round(ext(r_cell), 3)
r_cell_r <- rotate(r_cell)                   # [-180, 180]
ext(r_cell_r) <- round(ext(r_cell_r), 3)
```

```{r iterate_rows}
for (i in d_spp$rowid){  # i = 30 # Whale, humpback
  
  d_sp <- filter(d_spp, rowid == i)
  sp   <- d_sp$sciename
  p_sp <- ply |> 
    filter(
      sciename == sp) |> 
    mutate(
      value = case_match(
        esa_code,
        "TN" ~ 70L,    # assign 70% presence to Threatened habitat
        "EN" ~ 90L ))  # assign 90% presence to Endangered habitat
  # mapView(p_sp, zcol = "esa_code")
        
  sp_key <- glue("{ds_key}:{d_sp$sciename}")

  r_sp <- rasterize(
    p_sp,
    r_cell_r, 
    field = "value") |>  # trim() |> mapView()
    rotate() |> 
    crop(r_cell) |> 
    mask(r_cell)
  # mapView(r_sp) + mapView(p_sp, zcol = "esa_code")
  
  n_cells <- length(values(r_sp, na.rm = T))
  if (n_cells == 0){
    message(glue("No cells for {sp} ({i}/{nrow(d_spp)})"))
    # No cells for Oncorhynchus keta    (16/38)
    # No cells for Oncorhynchus nerka   (17/38)
    # No cells for Sebastes paucispinis (21/38)
    # No cells for Sebastes ruberrimus  (22/38)
    next()
  }

  # delete: existing ----
  mdl_seqs <- tbl(con_sdm, "model") |> 
    filter(ds_key == !!ds_key, taxa == !!sp_key) |> 
    pull(mdl_seq)
  if (length(mdl_seqs > 0)) {
    dbExecute(con_sdm, glue("DELETE FROM model      WHERE ds_key = '{ds_key}' AND taxa = '{sp_key}'"))
    dbExecute(con_sdm, glue("DELETE FROM species    WHERE ds_key = '{ds_key}' AND taxa = '{sp_key}'"))
    dbExecute(con_sdm, glue("DELETE FROM model_cell WHERE mdl_seq IN ({paste(mdl_seqs, collapse = ',')})"))
  }
  
  # append: model ----
  d_model <- tibble(
    ds_key      = ds_key,
    taxa        = sp_key,
    time_period = "2025",
    region      = "Global",
    mdl_type    = "binary",
    description = glue(
      "NMFS critical habitat for {sp}, interpolated to 0.05° resolution") )
  dbWriteTable(con_sdm, "model", d_model, append = TRUE)
  # tbl(con_sdm, "model") |> collect() |> tail()
  
  # get the mdl_seq that was just created
  mdl_seq <- dbGetQuery(con_sdm, glue("
    SELECT mdl_seq FROM model 
    WHERE
      ds_key = '{ds_key}' AND 
      taxa   = '{sp_key}'
    ORDER BY mdl_seq DESC LIMIT 1 "))$mdl_seq
  
  # d_sp |> glimpse()
  # Rows: 1
  # Columns: 4
  # $ sp_cat   <chr> "coral"
  # $ sciename <chr> "Acropora cervicornis"
  # $ comname  <chr> "Coral, staghorn"
  # $ esa_code <ord> TN
  
  # append: species ----
  d_species <- tibble(
    ds_key                   = ds_key,
    taxa                     = sp_key,
    sp_key                   = sp_key,
    worms_id                 = NA_integer_,  # TODO: lookup from WoRMS
    gbif_id                  = NA_integer_,  # TODO: lookup from GBIF
    itis_id                  = NA_integer_,  # TODO: lookup from ITIS
    iucn_id                  = NA_integer_,  # TODO: lookup from IUCN
    scientific_name_dataset  = sp,
    common_name_dataset      = d_sp$comname,
    # TODO: do lookup from WoRMS
    scientific_name_accepted = sp,
    common_name_accepted     = d_sp$comname,
    redlist_code             = d_sp$esa_code_max,
    redlist_year             = NA_integer_,
    sp_cat                   = d_sp$sp_cat)
  stopifnot(length(setdiff(names(d_species), dbListFields(con_sdm, "species"))) == 0)
  stopifnot(setdiff(dbListFields(con_sdm, "species"), names(d_species)) == "sp_seq")
  dbWriteTable(con_sdm, "species", d_species, append = T)
  # tbl(con_sdm, "species") |> collect() |> tail()
  # tbl(con_sdm, "model")   |> collect() |> tail()
  stopifnot(tbl(con_sdm, "species") |> filter(is.na(sp_seq)) |> collect() |> nrow() == 0)

  # append: model_cell ----
  # plot(trim(r_sp))
  d_mdl_cell <- as.data.frame(r_sp, cells = T, na.rm = T) |>
    tibble() |>
    select(cell_id = cell, value) |> 
    mutate(
      mdl_seq = mdl_seq) |> 
    arrange(cell_id)
  dbWriteTable(con_sdm, "model_cell", d_mdl_cell, append = T)
}
```


```{r}
dbListTables(con_sdm)

tbl(con_sdm, "dataset")
tbl(con_sdm, "model") |> 
  filter(ds_key %in% c("ch_nmfs"))
```


## Species Directory - ESA Threatened & Endangered | NOAA Fisheries

- [Species Directory - ESA Threatened & Endangered | NOAA Fisheries](https://www.fisheries.noaa.gov/species-directory/threatened-endangered?oq=&field_species_categories_vocab=All&field_region_vocab=All&items_per_page=350)

```{r}
librarian::shelf(
  chromote, rvest, tidyr)

tbl_url <- "https://www.fisheries.noaa.gov/species-directory/threatened-endangered?oq=&field_species_categories_vocab=All&field_region_vocab=All&items_per_page=350"

chrome <- chromote::default_chromote_object()
chrome$default_timeout <- 60
chromote::set_default_chromote_object(chrome)
# b <- ChromoteSession$new()
# b$default_timeout

# d_tbl_0 <- d_tbl
d_tbl_0 <- read_html_live(tbl_url) |> 
d_tbl <- d_tbl_0 |> 
  html_node("table") |> 
  html_table() |> 
  janitor::clean_names()

# d_tbl |> 
#   slice(1) |> 
#   glimpse()
# 
# d_tbl$species_name[14] |> cat()
# 
# d_tbl$species_name[14] |> str_replace_all("\\n\\s*\\n+", "\\\n")
# 
# d_tbl$protected_status[1] |> str_replace_all("\\n\\s*\\n+", "\\\n") |> cat()
# d_tbl$protected_status[2] |> str_replace_all("\\n\\s*\\n+", "\\\n") |> cat()

d_tbl <- d_tbl |> 
  rename(protected_status = listed_entity_protected_status_year_listed_recovery_plan_critical_habitat_region) |> 
  mutate(
    species_name     = str_replace_all(species_name,     "\\n\\s*\\n+", "\\\n"),
    species_category = str_replace_all(species_category, "\\n\\s*\\n+", "\\\n"),
    protected_status = str_replace_all(protected_status, "\\n\\s*\\n+", "\\\n")) |> 
  separate_wider_delim(
    species_name, 
    delim       = "\n",
    names       = c("sp_sci", "sp_cmn", "aka", "sp_aka"),
    too_few     = "align_start",
    too_many    = "merge",
    cols_remove = T) |> 
  separate_wider_delim(
    species_category, 
    delim       = "\n",
    names       = c("sp_cat", "sp_cat1", "sp_cat2", "sp_cat3", "sp_cat4"),
    too_few     = "align_start",
    too_many    = "merge",
    cols_remove = T) |> 
  mutate(across(where(is.character), str_trim)) |> 
  select(-aka, -sp_cat)

# d_tbl |> filter(
#   sp_sci == "Atlantic Sturgeon") |> 
#   pull(protected_status) |> 
#   cat()
#     Name of DPS or Stock
#               Carolina DPS
#     Species Status
#               ESA Endangered
#     Year Listed
#               2012
#     Recovery Plan
#               Under Development
#     Critical Habitat
#               Final
#     Region
#               New England/Mid-Atlantic
#           Southeast
#     Name of DPS or Stock
#               Chesapeake Bay DPS
#     Species Status
#               ESA Endangered
#     Year Listed
#               2012
#     Recovery Plan
#               Under Development
#     Critical Habitat
#               Final
#     Region
#               New England/Mid-Atlantic
#           Southeast
#     Name of DPS or Stock
#               New York Bight DPS
#     Species Status
#               ESA Endangered
#     Year Listed
#               2012
#     Recovery Plan
#               Under Development
#     Critical Habitat
#               Final
#     Region
#               New England/Mid-Atlantic
#           Southeast
#     Name of DPS or Stock
#               South Atlantic DPS
#     Species Status
#               ESA Endangered
#     Year Listed
#               2012
#     Recovery Plan
#               Under Development
#     Critical Habitat
#               Final
#     Region
#               New England/Mid-Atlantic
#           Southeast
#     Name of DPS or Stock
#               Gulf of Maine DPS
#     Species Status
#               ESA Threatened
#     Year Listed
#               2012
#     Recovery Plan
#               Under Development
#     Critical Habitat
#               Final
#     Region
#               New England/Mid-Atlantic
#           Southeast
```



```{r}
library(tidyverse)

# Fixed function - remove the extra list() wrapper
parse_protected_status <- function(status_text) {
  if (is.na(status_text) || status_text == "") {
    return(tibble())  # Return empty tibble, not list(tibble())
  }
  
  # Clean up the text - remove extra whitespace and normalize newlines
  clean_text <- status_text |>
    str_replace_all("\\n\\s*", "\n") |>
    str_replace_all("\\n+", "\n") |>
    str_trim()
  
  # Split into blocks by "Name of DPS or Stock"
  blocks <- str_split(clean_text, "(?=Name of DPS or Stock)")[[1]]
  blocks <- blocks[blocks != ""] # Remove empty blocks
  
  # Parse each block
  parsed_blocks <- map_dfr(blocks, function(block) {
    # Initialize with NAs
    result <- tibble(
      name_of_dps_or_stock = NA_character_,
      species_status = NA_character_,
      year_listed = NA_character_,
      recovery_plan = NA_character_,
      critical_habitat = NA_character_,
      region = NA_character_
    )
    
    # Extract each field using regex
    if (str_detect(block, "Name of DPS or Stock")) {
      result$name_of_dps_or_stock <- str_extract(block, "(?<=Name of DPS or Stock\\n)([^\\n]+)") |> str_trim()
    }
    
    if (str_detect(block, "Species Status")) {
      # Handle multiple status lines
      status_section <- str_extract(block, "Species Status\\n([^\\n]+(?:\\n[^\\n]+)*?)(?=\\n\\s*[A-Z]|$)")
      if (!is.na(status_section)) {
        status_lines <- str_extract_all(status_section, "(?<=Species Status\\n).*")[[1]]
        result$species_status <- str_c(status_lines, collapse = "; ") |> str_trim()
      }
    }
    
    if (str_detect(block, "Year Listed")) {
      result$year_listed <- str_extract(block, "(?<=Year Listed\\n)([^\\n]+)") |> str_trim()
    }
    
    if (str_detect(block, "Recovery Plan")) {
      result$recovery_plan <- str_extract(block, "(?<=Recovery Plan\\n)([^\\n]+)") |> str_trim()
    }
    
    if (str_detect(block, "Critical Habitat")) {
      result$critical_habitat <- str_extract(block, "(?<=Critical Habitat\\n)([^\\n]+)") |> str_trim()
    }
    
    if (str_detect(block, "Region")) {
      # Handle multiple region lines
      region_section <- str_extract(block, "Region\\n([^\\n]+(?:\\n\\s*[^\\nA-Z][^\\n]*)*)")
      if (!is.na(region_section)) {
        region_lines <- str_extract_all(region_section, "(?<=Region\\n).*(?:\\n\\s*[^\\nA-Z].*)*")[[1]]
        regions <- str_split(region_lines, "\\n") |> 
          map(str_trim) |> 
          unlist() |> 
          keep(~ .x != "")
        result$region <- str_c(regions, collapse = "; ")
      }
    }
    
    return(result)
  })
  
  return(parsed_blocks)  # Return tibble directly, not list(tibble)
}

# Re-run the parsing
d_tbl_parsed <- d_tbl |>
  mutate(
    protected_status_parsed = map(protected_status, parse_protected_status),
    protected_status_n      = map_int(protected_status_parsed, nrow))
```

```{r}
# d_tbl_parsed$protected_status_n |> table( useNA = "ifany")
#  1  2  4  5  9 11 13 17 
# 90  6  2  3  1  1  1  1

d_tbl_parsed |>
  unnest(protected_status_parsed) |>
  pull(species_status) |>
  table()
#            ESA Candidate              ESA Endangered 
#                        4                          40 
# ESA Endangered - Foreign ESA Experimental Population
#                       41                           6 
#           ESA Threatened    ESA Threatened - Foreign 
#                       56                          28
# ESA Experimental Population: "These populations are treated as threatened, regardless of the species' status elsewhere in its range"
# - - [Designating Experimental Populations under the Endangered Species Act: Section 10(j) | NOAA Fisheries](https://www.fisheries.noaa.gov/designating-experimental-populations-under-endangered-species-act-section-10j)

# EN: 0.8 Endangered (IUCN, ESA)
species_status %in% c(
  "ESA Candidate", 
  "ESA Endangered", 
  "ESA Endangered - Foreign") ~ "EN",
# TN: 0.6 Threatened (ESA)
species_status %in% c(
  "ESA Experimental Population",
  "ESA Threatened", 
  "ESA Threatened - Foreign") ~ "TN")


# d_tbl_parsed |> slice(1) |> pluck("protected_status_tbl", 1, 1, "species_status")
d_tbl_parsed |> 
  map(pluck("protected_status_tbl", 1, 1, "species_status"))
  # table(useNA = "ifany")


# To view the parsed data for Atlantic Sturgeon:
d_tbl_parsed |>
  filter(sp_sci == "Atlantic Sturgeon") |>
  pull(protected_status_parsed) |>
  pluck(1)
```

